//
// Copyright 2020-2022 Picovoice Inc.
//
// You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
// file accompanying this source.
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pvStatusToException = exports.RhinoActivationRefused = exports.RhinoActivationThrottled = exports.RhinoActivationLimitReached = exports.RhinoActivationError = exports.RhinoRuntimeError = exports.RhinoInvalidStateError = exports.RhinoKeyError = exports.RhinoStopIterationError = exports.RhinoInvalidArgumentError = exports.RhinoIoError = exports.RhinoOutOfMemoryError = exports.RhinoError = void 0;
const pv_status_t_1 = require("./pv_status_t");
class RhinoError extends Error {
}
exports.RhinoError = RhinoError;
class RhinoOutOfMemoryError extends RhinoError {
}
exports.RhinoOutOfMemoryError = RhinoOutOfMemoryError;
class RhinoIoError extends RhinoError {
}
exports.RhinoIoError = RhinoIoError;
class RhinoInvalidArgumentError extends RhinoError {
}
exports.RhinoInvalidArgumentError = RhinoInvalidArgumentError;
class RhinoStopIterationError extends RhinoError {
}
exports.RhinoStopIterationError = RhinoStopIterationError;
class RhinoKeyError extends RhinoError {
}
exports.RhinoKeyError = RhinoKeyError;
class RhinoInvalidStateError extends RhinoError {
}
exports.RhinoInvalidStateError = RhinoInvalidStateError;
class RhinoRuntimeError extends RhinoError {
}
exports.RhinoRuntimeError = RhinoRuntimeError;
class RhinoActivationError extends RhinoError {
}
exports.RhinoActivationError = RhinoActivationError;
class RhinoActivationLimitReached extends RhinoError {
}
exports.RhinoActivationLimitReached = RhinoActivationLimitReached;
class RhinoActivationThrottled extends RhinoError {
}
exports.RhinoActivationThrottled = RhinoActivationThrottled;
class RhinoActivationRefused extends RhinoError {
}
exports.RhinoActivationRefused = RhinoActivationRefused;
function pvStatusToException(pvStatus, errorMessage) {
    switch (pvStatus) {
        case pv_status_t_1.default.OUT_OF_MEMORY:
            throw new RhinoOutOfMemoryError(errorMessage);
        case pv_status_t_1.default.IO_ERROR:
            throw new RhinoIoError(errorMessage);
        case pv_status_t_1.default.INVALID_ARGUMENT:
            throw new RhinoInvalidArgumentError(errorMessage);
        case pv_status_t_1.default.STOP_ITERATION:
            throw new RhinoStopIterationError(errorMessage);
        case pv_status_t_1.default.KEY_ERROR:
            throw new RhinoKeyError(errorMessage);
        case pv_status_t_1.default.INVALID_STATE:
            throw new RhinoInvalidStateError(errorMessage);
        case pv_status_t_1.default.RUNTIME_ERROR:
            throw new RhinoRuntimeError(errorMessage);
        case pv_status_t_1.default.ACTIVATION_ERROR:
            throw new RhinoActivationError(errorMessage);
        case pv_status_t_1.default.ACTIVATION_LIMIT_REACHED:
            throw new RhinoActivationLimitReached(errorMessage);
        case pv_status_t_1.default.ACTIVATION_THROTTLED:
            throw new RhinoActivationThrottled(errorMessage);
        case pv_status_t_1.default.ACTIVATION_REFUSED:
            throw new RhinoActivationRefused(errorMessage);
        default:
            console.warn(`Unmapped error code: ${pvStatus}`);
            throw new RhinoError(errorMessage);
    }
}
exports.pvStatusToException = pvStatusToException;
//# sourceMappingURL=errors.js.map