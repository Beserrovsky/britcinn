//
// Copyright 2020-2022 Picovoice Inc.
//
// You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
// file accompanying this source.
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pvStatusToException = exports.PorcupineActivationRefused = exports.PorcupineActivationThrottled = exports.PorcupineActivationLimitReached = exports.PorcupineActivationError = exports.PorcupineRuntimeError = exports.PorcupineInvalidStateError = exports.PorcupineKeyError = exports.PorcupineStopIterationError = exports.PorcupineInvalidArgumentError = exports.PorcupineIoError = exports.PorcupineOutOfMemoryError = exports.PorcupineError = void 0;
const pv_status_t_1 = require("./pv_status_t");
class PorcupineError extends Error {
}
exports.PorcupineError = PorcupineError;
class PorcupineOutOfMemoryError extends PorcupineError {
}
exports.PorcupineOutOfMemoryError = PorcupineOutOfMemoryError;
class PorcupineIoError extends PorcupineError {
}
exports.PorcupineIoError = PorcupineIoError;
class PorcupineInvalidArgumentError extends PorcupineError {
}
exports.PorcupineInvalidArgumentError = PorcupineInvalidArgumentError;
class PorcupineStopIterationError extends PorcupineError {
}
exports.PorcupineStopIterationError = PorcupineStopIterationError;
class PorcupineKeyError extends PorcupineError {
}
exports.PorcupineKeyError = PorcupineKeyError;
class PorcupineInvalidStateError extends PorcupineError {
}
exports.PorcupineInvalidStateError = PorcupineInvalidStateError;
class PorcupineRuntimeError extends PorcupineError {
}
exports.PorcupineRuntimeError = PorcupineRuntimeError;
class PorcupineActivationError extends PorcupineError {
}
exports.PorcupineActivationError = PorcupineActivationError;
class PorcupineActivationLimitReached extends PorcupineError {
}
exports.PorcupineActivationLimitReached = PorcupineActivationLimitReached;
class PorcupineActivationThrottled extends PorcupineError {
}
exports.PorcupineActivationThrottled = PorcupineActivationThrottled;
class PorcupineActivationRefused extends PorcupineError {
}
exports.PorcupineActivationRefused = PorcupineActivationRefused;
function pvStatusToException(pvStatus, errorMessage) {
    switch (pvStatus) {
        case pv_status_t_1.default.OUT_OF_MEMORY:
            throw new PorcupineOutOfMemoryError(errorMessage);
        case pv_status_t_1.default.IO_ERROR:
            throw new PorcupineIoError(errorMessage);
        case pv_status_t_1.default.INVALID_ARGUMENT:
            throw new PorcupineInvalidArgumentError(errorMessage);
        case pv_status_t_1.default.STOP_ITERATION:
            throw new PorcupineStopIterationError(errorMessage);
        case pv_status_t_1.default.KEY_ERROR:
            throw new PorcupineKeyError(errorMessage);
        case pv_status_t_1.default.INVALID_STATE:
            throw new PorcupineInvalidStateError(errorMessage);
        case pv_status_t_1.default.RUNTIME_ERROR:
            throw new PorcupineRuntimeError(errorMessage);
        case pv_status_t_1.default.ACTIVATION_ERROR:
            throw new PorcupineActivationError(errorMessage);
        case pv_status_t_1.default.ACTIVATION_LIMIT_REACHED:
            throw new PorcupineActivationLimitReached(errorMessage);
        case pv_status_t_1.default.ACTIVATION_THROTTLED:
            throw new PorcupineActivationThrottled(errorMessage);
        case pv_status_t_1.default.ACTIVATION_REFUSED:
            throw new PorcupineActivationRefused(errorMessage);
        default:
            console.warn(`Unmapped error code: ${pvStatus}`);
            throw new PorcupineError(errorMessage);
    }
}
exports.pvStatusToException = pvStatusToException;
//# sourceMappingURL=errors.js.map